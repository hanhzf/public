#cloud-config

# 在启动时输出hello信息
bootcmd:
  - 'echo "$(date): Hello, cloud-init! ${instance_name} Nginx脚本开始执行..." | tee ${log_file}'

# 更新包管理器
package_update: ${package_update}
package_upgrade: ${package_upgrade}

# 安装必要的包
packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - lsb-release

# 创建安装脚本
write_files:
  - path: /tmp/install-docker.sh
    content: |
      #!/bin/bash
      set -e
      
      # 设置日志文件
      LOG_FILE="${log_file}"
      
      # 函数：记录带时间戳的日志
      log() {
        echo "$(date '+%Y-%m-%d %H:%M:%S'): $1" | tee -a "$LOG_FILE"
      }
      
      # 开始记录
      log "========================================="
      log "开始执行Docker和Nginx安装脚本"
      log "实例: ${instance_name}"
      log "========================================="
      
      # 设置非交互模式
      export DEBIAN_FRONTEND=noninteractive
      
      # 等待包管理器解锁的函数
      wait_for_apt_lock() {
        while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || sudo fuser /var/lib/apt/lists/lock >/dev/null 2>&1 || sudo fuser /var/cache/apt/archives/lock >/dev/null 2>&1; do
          log "等待apt锁释放..."
          sleep 5
        done
      }
      
      log "等待apt锁释放..."
      wait_for_apt_lock
      
      log "开始安装Docker..."
      
      # 添加Docker官方GPG密钥
      log "添加Docker官方GPG密钥..."
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      
      # 添加Docker软件源
      log "添加Docker软件源..."
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      
      # 更新软件包索引
      log "更新软件包索引..."
      wait_for_apt_lock
      apt-get update
      
      # 安装Docker Engine
      log "安装Docker Engine..."
      wait_for_apt_lock
      apt-get install -y docker-ce docker-ce-cli containerd.io
      
      # 启动并启用Docker服务
      log "启动并启用Docker服务..."
      systemctl start docker
      systemctl enable docker
      
      # 将用户添加到docker组
      log "将用户添加到docker组..."
      usermod -aG docker ubuntu || usermod -aG docker root || true
      
      log "Docker安装完成！"
      
      # 安装Docker Compose
      log "开始安装Docker Compose..."
      curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      chmod +x /usr/local/bin/docker-compose
      
      log "Docker Compose安装完成！"
      
      %{ if harbor_enabled ~}
      # 登录到Harbor仓库（如果启用）
      log "登录到Harbor仓库..."
      echo "${harbor_password}" | docker login ${harbor_registry} -u ${harbor_username} --password-stdin
      
      if [ $? -eq 0 ]; then
        log "Harbor仓库登录成功！"
      else
        log "Harbor仓库登录失败，将使用默认Nginx镜像"
      fi
      %{ endif ~}
      
      # 创建Nginx目录
      log "创建Nginx目录结构..."
      mkdir -p ${nginx_config_dir}
      mkdir -p ${nginx_html_dir}
      mkdir -p ${nginx_config_dir}/conf.d
      mkdir -p /opt/nginx/logs
      mkdir -p /opt/nginx/ssl
      chmod 755 ${nginx_config_dir}
      chmod 755 ${nginx_html_dir}
      
      # 创建默认的nginx.conf
      log "创建Nginx配置文件..."
      cat > ${nginx_config_dir}/nginx.conf << 'EOF'
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 64M;

    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript
               application/javascript application/xml+rss
               application/json;

    # 包含其他配置文件
    include /etc/nginx/conf.d/*.conf;
}
EOF
      
      # 创建默认站点配置
      log "创建默认站点配置..."
      cat > ${nginx_config_dir}/conf.d/default.conf << 'EOF'
server {
    listen 80;
    listen [::]:80;
    server_name localhost;

    root /usr/share/nginx/html;
    index index.html index.htm;

    location / {
        try_files $uri $uri/ =404;
    }

    # 错误页面
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    # 禁止访问隐藏文件
    location ~ /\. {
        deny all;
    }
}

# HTTPS配置示例（需要SSL证书）
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name localhost;
#
#     ssl_certificate /etc/nginx/ssl/server.crt;
#     ssl_certificate_key /etc/nginx/ssl/server.key;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
#
#     root /usr/share/nginx/html;
#     index index.html index.htm;
#
#     location / {
#         try_files $uri $uri/ =404;
#     }
# }
EOF
      
      # 创建默认HTML页面
      log "创建默认HTML页面..."
      cat > ${nginx_html_dir}/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Welcome to nginx!</title>
    <style>
        body {
            width: 35em;
            margin: 0 auto;
            font-family: Tahoma, Verdana, Arial, sans-serif;
        }
    </style>
</head>
<body>
    <h1>Welcome to nginx!</h1>
    <p>If you see this page, the nginx web server is successfully installed and
    working. Further configuration is required.</p>

    <p>For online documentation and support please refer to
    <a href="http://nginx.org/">nginx.org</a>.<br/>
    Commercial support is available at
    <a href="http://nginx.com/">nginx.com</a>.</p>

    <p><em>Thank you for using nginx.</em></p>
</body>
</html>
EOF
      
      # 运行Nginx容器
      log "启动Nginx容器..."
      docker run -d \
        --name ${nginx_container_name} \
        --restart=unless-stopped \
        -p ${nginx_port}:80 \
        -p ${nginx_ssl_port}:443 \
        -v ${nginx_config_dir}/nginx.conf:/etc/nginx/nginx.conf:ro \
        -v ${nginx_config_dir}/conf.d:/etc/nginx/conf.d:ro \
        -v ${nginx_html_dir}:/usr/share/nginx/html:ro \
        -v /opt/nginx/logs:/var/log/nginx \
        -v /opt/nginx/ssl:/etc/nginx/ssl:ro \
        nginx:${nginx_version}
      
      # 等待Nginx容器启动
      log "等待Nginx容器启动（${startup_wait_time}秒）..."
      sleep ${startup_wait_time}
      
      # 验证安装
      log "========================================="
      log "验证安装结果"
      log "========================================="
      
      docker --version | tee -a "$LOG_FILE"
      docker-compose --version | tee -a "$LOG_FILE"
      
      log "当前运行的容器："
      docker ps | tee -a "$LOG_FILE"
      
      log "Nginx容器日志（最后10行）："
      docker logs --tail 10 ${nginx_container_name} 2>&1 | tee -a "$LOG_FILE" || log "获取Nginx日志失败"
      
      # 测试Nginx服务
      log "测试Nginx服务..."
      curl -s -o /dev/null -w "HTTP响应码: %{http_code}\n" http://localhost:${nginx_port} | tee -a "$LOG_FILE" || log "Nginx服务测试失败"
      
      log "========================================="
      log "Nginx服务信息："
      log "HTTP端口: ${nginx_port}"
      log "HTTPS端口: ${nginx_ssl_port}"
      log "配置目录: ${nginx_config_dir}"
      log "网站根目录: ${nginx_html_dir}"
      log "日志目录: /opt/nginx/logs"
      log "SSL证书目录: /opt/nginx/ssl"
      log "版本: ${nginx_version}"
      log "========================================="
      log "访问地址："
      log "HTTP: http://服务器IP:${nginx_port}"
      log "HTTPS: https://服务器IP:${nginx_ssl_port} (需要配置SSL证书)"
      log "========================================="
      log "cloud-init 脚本执行完成！Nginx安装成功！"
      log "========================================="
    permissions: '0755'

# 在系统启动后运行安装脚本
runcmd:
  - 'echo "$(date): 开始执行runcmd阶段..." | tee -a /var/log/cloudinit-execution.log'
  - 'chmod +x /tmp/install-docker.sh'
  - 'echo "$(date): 开始执行Docker和Nginx安装脚本..." | tee -a /var/log/cloudinit-execution.log'
  - '/tmp/install-docker.sh'
  - 'echo "$(date): Docker和Nginx安装脚本执行完毕!" | tee -a /var/log/cloudinit-execution.log'

# 最终消息
final_message: "cloud-init 配置完成！${instance_name} 的Docker和Nginx安装已完成。"